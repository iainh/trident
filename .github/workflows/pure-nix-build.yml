name: Pure Nix Build and QA

on:
  push:
    branches: [ main, linux-refactoring ]
  pull_request:
    branches: [ main, linux-refactoring ]
  workflow_dispatch:

jobs:
  pure-nix-qa:
    name: Pure Nix Quality Assurance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main
      
    - name: Setup Nix cache
      uses: DeterminateSystems/magic-nix-cache-action@main
        
    - name: Run all QA checks via Nix flake
      run: |
        echo "=== Running Nix Flake Check ==="
        nix flake check --verbose
        
    - name: Run individual QA checks (Linux)
      run: |
        echo "=== Running Tests ==="
        nix run .#packages.x86_64-linux.test
        
        echo "=== Running Clippy ==="
        nix run .#packages.x86_64-linux.clippy
        
        echo "=== Checking Formatting ==="
        nix run .#packages.x86_64-linux.fmt-check
        
        echo "=== Security Audit ==="
        nix run .#packages.x86_64-linux.audit
        
        echo "=== Dependency Check ==="
        nix run .#packages.x86_64-linux.deny
        
        echo "=== Build Verification ==="
        nix run .#packages.x86_64-linux.build-check

  cross-platform-nix:
    name: Cross-platform Pure Nix Build
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main
      
    - name: Setup Nix cache
      uses: DeterminateSystems/magic-nix-cache-action@main
        
    - name: Build for current platform
      run: |
        echo "=== Building for ${{ matrix.os }} ==="
        nix build --verbose
        ls -la result*
        
    - name: Test development shell
      run: |
        echo "=== Testing development environment ==="
        nix develop --command bash -c "
          echo 'Rust version:' && rustc --version
          echo 'Cargo version:' && cargo --version
          echo 'PKG_CONFIG_PATH (first 5 entries):' && echo \$PKG_CONFIG_PATH | tr ':' '\n' | head -5
          echo 'Development environment OK'
        "

  create-artifacts:
    name: Create Pure Nix Artifacts
    runs-on: ubuntu-latest
    needs: [pure-nix-qa]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main
      
    - name: Setup Nix cache
      uses: DeterminateSystems/magic-nix-cache-action@main
        
    - name: Build Linux binary via Nix
      run: |
        echo "=== Building Linux binary ==="
        nix run .#packages.x86_64-linux.linux
        cp target/release/trident trident-linux-x86_64-nix
        
    - name: Upload pure Nix artifact
      uses: actions/upload-artifact@v4
      with:
        name: trident-pure-nix-linux-${{ github.sha }}
        path: trident-linux-x86_64-nix
        retention-days: 90