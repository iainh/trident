name: Linux Build and Test

on:
  push:
    branches: [ main, linux-refactoring ]
  pull_request:
    branches: [ main, linux-refactoring ]
  workflow_dispatch:  # Allow manual triggering

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  linux-build:
    name: Build on Linux
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        rust-version: [stable, beta]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libx11-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxi-dev \
          libxext-dev \
          libxfixes-dev \
          libxkbcommon-dev \
          libwayland-dev \
          libssl-dev \
          libgtk-3-dev \
          libglib2.0-dev \
          libgio-2.0-dev \
          libcairo2-dev \
          libpango1.0-dev \
          libgdk-pixbuf2.0-dev \
          libatk1.0-dev
          
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust-version }}
        components: rustfmt, clippy
        
    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust-version }}-
          ${{ runner.os }}-cargo-
          
    - name: Check code formatting
      if: matrix.rust-version == 'stable'
      run: cargo fmt --all -- --check
      
    - name: Run Clippy
      if: matrix.rust-version == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Run tests
      run: cargo test --verbose --all-features
      
    - name: Build release binary
      run: cargo build --release --verbose
      
    - name: Verify binary
      run: |
        file target/release/trident
        ls -la target/release/trident
        
    - name: Test binary execution (basic help)
      run: |
        # Test that the binary can at least show help without crashing
        timeout 10s ./target/release/trident --help || true
        
    - name: Upload Linux binary
      if: matrix.rust-version == 'stable'
      uses: actions/upload-artifact@v4
      with:
        name: trident-linux-${{ github.sha }}
        path: target/release/trident
        retention-days: 30

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: cargo audit

  cross-platform-test:
    name: Cross-platform Compatibility
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libx11-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxi-dev \
          libxext-dev \
          libxfixes-dev \
          libxkbcommon-dev \
          libwayland-dev \
          libssl-dev \
          libgtk-3-dev \
          libglib2.0-dev \
          libgio-2.0-dev \
          libcairo2-dev \
          libpango1.0-dev \
          libgdk-pixbuf2.0-dev \
          libatk1.0-dev
          
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build and test
      run: |
        cargo build --release
        cargo test
        
    - name: Test configuration detection
      run: |
        # Test that config generation works on Linux
        ./target/release/trident --generate-config || true